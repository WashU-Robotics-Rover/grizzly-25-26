name: Build & Release ROS 2 Humble install – grizzly

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release_sources:
    runs-on: ubuntu-22.04
    container:
      image: ros:humble
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install helper tools
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends jq rsync
          rm -rf /var/lib/apt/lists/*

      # Create a portable installer that the user runs locally to build + source
      - name: Write installer script
        run: |
          set -euo pipefail
          cat > install_grizzly.sh <<'EOF'
          #!/usr/bin/env bash
          # Installs deps, builds, and shows how to source the workspace.
          # Usage:
          #   ./install_grizzly.sh                # in-place, current directory is the workspace root
          #   ./install_grizzly.sh --no-rosdep    # skip rosdep (air-gapped / preinstalled deps)
          #   ./install_grizzly.sh --release      # colcon --cmake-args -DCMAKE_BUILD_TYPE=Release

          set -euo pipefail

          WANT_ROSDEP=1
          BUILD_TYPE="RelWithDebInfo"

          for arg in "$@"; do
            case "$arg" in
              --no-rosdep) WANT_ROSDEP=0 ;;
              --release)   BUILD_TYPE="Release" ;;
              *) echo "Unknown arg: $arg" >&2; exit 2 ;;
            esac
          done

          if ! command -v colcon >/dev/null 2>&1; then
            echo "colcon not found. Make sure ROS 2 Humble is installed and sourced." >&2
            echo "For Docker: use 'ros:humble' or source /opt/ros/humble/setup.bash" >&2
            exit 1
          fi

          # Try to source Humble if available (safe even if already sourced)
          if [ -f /opt/ros/humble/setup.bash ]; then
            # Avoid nounset failures inside setup scripts
            set +u
            source /opt/ros/humble/setup.bash
            set -u
          fi

          # Initialize rosdep database if needed
          if [ "$WANT_ROSDEP" -eq 1 ]; then
            if command -v rosdep >/dev/null 2>&1; then
              sudo -n true >/dev/null 2>&1 || {
                echo "rosdep may need sudo for system packages." >&2
                echo "You might be prompted for your password." >&2
              }
              set +e
              rosdep update
              set -e
              # Install deps from workspace (ignore not-ROS sources)
              rosdep install --from-paths . --ignore-src -r -y || {
                echo "rosdep install completed with non-fatal errors; continuing." >&2
              }
            else
              echo "rosdep not found; skipping dependency install." >&2
            fi
          fi

          # Build
          echo "Building with CMAKE_BUILD_TYPE=${BUILD_TYPE} ..."
          colcon build --symlink-install \
            --cmake-args -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"

          cat <<EONOTE

          =======================
          ✅ Build finished.

          To use this workspace in the current shell:
              source install/setup.bash

          You can add this line to your shell RC to auto-source next time:
              echo 'source "$(pwd)/install/setup.bash"' >> ~/.bashrc   # or ~/.zshrc

          (If you have an underlay, source it first, then this overlay.)
          =======================
          EONOTE
          EOF
          chmod +x install_grizzly.sh

      - name: Write quick README
        run: |
          set -euo pipefail
          cat > README_INSTALL.md <<'EOF'
          # grizzly – source release

          This archive contains the **source** for the `grizzly` ROS 2 (Humble) package(s),
          plus a helper installer script.

          ## Requirements
          - ROS 2 Humble environment (e.g., `/opt/ros/humble`), including `colcon`
          - `rosdep` (recommended)

          ## Build & Use
          ```bash
          # In the extracted folder (workspace root)
          ./install_grizzly.sh        # installs deps (rosdep), builds with colcon
          source install/setup.bash   # enable the overlay in this shell
          ```

          Optional flags:
          - `--no-rosdep`  : skip dependency installation
          - `--release`    : build with `-DCMAKE_BUILD_TYPE=Release` (default is RelWithDebInfo)
          EOF

      - name: Stage package sources (exclude CI/build artifacts)
        run: |
          set -euo pipefail
          mkdir -p out/src
          rsync -a \
            --exclude '.git*' \
            --exclude '.github' \
            --exclude 'build' \
            --exclude 'install' \
            --exclude 'log' \
            ./ out/src/

          # Put installer and README at the archive root
          cp install_grizzly.sh README_INSTALL.md out/

      - name: Prepare source archive
        id: prep
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          BUILD_DATE="$(date -u +%Y%m%d%H%M%S)"
          VERSION="${BUILD_DATE}-${SHORT_SHA}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          TAR="grizzly-source-${VERSION}.tar.gz"
          (cd out && tar -czf "../${TAR}" .)

          sha256sum "${TAR}" > "SHA256SUMS"
          jq -n --arg version "$VERSION" --arg sha "$GITHUB_SHA" --arg date "$BUILD_DATE" \
            '{artifact:"source", version:$version, commit:$sha, built_at_utc:$date, distro:"humble"}' > "version.json"

          echo "tar=${TAR}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "auto-${{ steps.prep.outputs.version }}"
          name: "grizzly source ${{ steps.prep.outputs.version }}"
          draft: false
          prerelease: true
          files: |
            ${{ steps.prep.outputs.tar }}
            SHA256SUMS
            version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
