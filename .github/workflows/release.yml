name: Build & Release ROS 2 Humble install â€“ grizzly

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_release:
    runs-on: ubuntu-22.04
    container:
      image: ros:humble
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Utilities needed below
      - name: Install helper tools
        run: |
          apt-get update
          apt-get install -y --no-install-recommends jq rsync perl
          rm -rf /var/lib/apt/lists/*

      # Optional: inside ros:humble this is not strictly required, but ok to keep
      - name: Set up ROS 2 Humble build tools
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      # - name: Install dependencies via rosdep
      #   run: |
      #     apt-get update
      #     rosdep update
      #     rosdep install --from-paths src --ignore-src -r -y

      - name: Build workspace
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install

      # Make the generated setup portable across environments (Linux apt, RoboStack/mac, etc.)
      - name: Make setup portable
        run: |
          set -euo pipefail
          SETUP=install/setup.bash

          # (1) Silence "not found" messages from the helper so missing underlays don't spam users
          perl -0777 -pe 's/echo "not found: \\"\\$1\\"" 1>&2/:\ # suppressed/g' -i "$SETUP"

          # (2) Replace hardcoded /opt/ros/humble underlay with optional $ROS_UNDERLAY if provided
          perl -0777 -pe '
            s/COLCON_CURRENT_PREFIX="\/opt\/ros\/humble"\n_colcon_prefix_chain_bash_source_script "\$COLCON_CURRENT_PREFIX\/local_setup\.bash"/\
# Optional underlay: set ROS_UNDERLAY to a prefix that has local_setup.bash (e.g., RoboStack on mac)\n\
if [ -n "\${ROS_UNDERLAY:-}" ] \&\& [ -f "\$ROS_UNDERLAY\/local_setup.bash" ]; then\n\
  COLCON_CURRENT_PREFIX="\$ROS_UNDERLAY"\n\
  _colcon_prefix_chain_bash_source_script "\$COLCON_CURRENT_PREFIX\/local_setup.bash"\n\
fi/
          ' -i "$SETUP"

      - name: Prepare release artifacts
        id: prep
        run: |
          set -e -o pipefail  # note: no -u here to avoid nounset issues

          # Version info (semver if tagging; otherwise date+shortsha)
          SHORT_SHA="${GITHUB_SHA::7}"
          BUILD_DATE="$(date -u +%Y%m%d%H%M%S)"
          VERSION="${BUILD_DATE}-${SHORT_SHA}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          # Stage a copy of install so tarball paths are clean
          mkdir -p out
          rsync -a --delete install/ out/install/

          # Write version metadata
          echo "${VERSION}" > out/install/VERSION
          jq -n --arg version "$VERSION" --arg sha "$GITHUB_SHA" --arg date "$BUILD_DATE" \
            '{version:$version, commit:$sha, built_at_utc:$date, distro:"humble"}' > out/version.json

          # Tar and checksums
          TAR="grizzly-install-${VERSION}.tar.gz"
          (cd out && tar -czf "../${TAR}" install version.json)
          sha256sum "${TAR}" > "SHA256SUMS"
          echo "tar=${TAR}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "auto-${{ steps.prep.outputs.version }}"
          name: "grizzly install ${{ steps.prep.outputs.version }}"
          draft: false
          prerelease: true
          files: |
            ${{ steps.prep.outputs.tar }}
            SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
