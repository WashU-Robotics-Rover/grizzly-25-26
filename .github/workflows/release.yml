name: Build & Release ROS 2 Humble install â€“ grizzly

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_release:
    runs-on: ubuntu-22.04
    container:
      image: ros:humble
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install helper tools
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends jq rsync
          rm -rf /var/lib/apt/lists/*

      # Optional inside ros:humble; okay to keep
      - name: Set up ROS 2 Humble build tools
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      # - name: Install dependencies via rosdep
      #   run: |
      #     apt-get update
      #     rosdep update
      #     rosdep install --from-paths src --ignore-src -r -y

      - name: Build workspace
        run: |
          set -euo pipefail
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install

      # Make the generated setup portable without YAML-unfriendly quoting
      - name: Make setup portable
        run: |
          set -euo pipefail
          SETUP="install/setup.bash"

          # (1) Silence "not found" messages in _colcon_prefix_chain_bash_source_script
          #     Exact line in template: echo "not found: \"$1\"" 1>&2
          sed -i 's/echo "not found: \"\$1\"" 1>&2/: # suppressed/' "$SETUP"

          # (2) Replace hardcoded /opt/ros/humble underlay with optional $ROS_UNDERLAY block
          #     We detect the specific two-line sequence and output a conditional block instead.
          awk '
            BEGIN { skip_next = 0 }
            {
              if (skip_next) { skip_next = 0; next }
              if ($0 ~ /^COLCON_CURRENT_PREFIX="\/opt\/ros\/humble"$/) {
                skip_next = 1
                print "# Optional underlay: set ROS_UNDERLAY to a prefix that has local_setup.bash (e.g., RoboStack on mac)"
                print "if [ -n \"${ROS_UNDERLAY:-}\" ] && [ -f \"$ROS_UNDERLAY/local_setup.bash\" ]; then"
                print "  COLCON_CURRENT_PREFIX=\"$ROS_UNDERLAY\""
                print "  _colcon_prefix_chain_bash_source_script \"$COLCON_CURRENT_PREFIX/local_setup.bash\""
                print "fi"
              } else {
                print
              }
            }
          ' "$SETUP" > "$SETUP.tmp"
          mv "$SETUP.tmp" "$SETUP"

      - name: Prepare release artifacts
        id: prep
        run: |
          set -e -o pipefail  # no -u here (some env files reference unset vars)

          SHORT_SHA="${GITHUB_SHA::7}"
          BUILD_DATE="$(date -u +%Y%m%d%H%M%S)"
          VERSION="${BUILD_DATE}-${SHORT_SHA}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          # Stage clean paths
          mkdir -p out
          rsync -a --delete install/ out/install/

          # Version metadata
          echo "${VERSION}" > out/install/VERSION
          jq -n --arg version "$VERSION" --arg sha "$GITHUB_SHA" --arg date "$BUILD_DATE" \
            '{version:$version, commit:$sha, built_at_utc:$date, distro:"humble"}' > out/version.json

          # Tarball + checksum
          TAR="grizzly-install-${VERSION}.tar.gz"
          (cd out && tar -czf "../${TAR}" install version.json)
          sha256sum "${TAR}" > "SHA256SUMS"
          echo "tar=${TAR}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "auto-${{ steps.prep.outputs.version }}"
          name: "grizzly install ${{ steps.prep.outputs.version }}"
          draft: false
          prerelease: true
          files: |
            ${{ steps.prep.outputs.tar }}
            SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
